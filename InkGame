-- Load WindUI
local Version = "1.6.31"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

-- Variables
local WalkSpeedValue, JumpPowerValue = 16, 50
local SpeedEnabled = false

-- Create Window
local Window = WindUI:CreateWindow({
	Title = "Ink Game Script",
	Icon = "rbxassetid://4483345998",
	Author = "Merqury Developer",
	Folder = "InkGameConfig",
	Size = UDim2.fromOffset(580, 460),
	KeySystem = {
		Key = "FIXED_KEY",
		Note = "Join our Discord for the key!",
		URL = "https://discord.gg/example",
		SaveKey = true
	},
	Transparent = true,
	Theme = "Dark",
	SideBarWidth = 170
})

-- === RED LIGHT TAB ===
local redLightTab = Window:Tab({
	Title = "RedLight",
	Icon = "lightbulb"
})

redLightTab:Button({
	Title = "Win Red Light Green Light",
	Callback = function()
		local pos = Vector3.new(-46.143, 1023.516, 135.9)
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
			LocalPlayer.Character:PivotTo(CFrame.new(pos))
		end
	end
})

redLightTab:Button({
	Title = "Teleport to Start",
	Callback = function()
		local startPos = Vector3.new(0, 1000, 0)
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
			LocalPlayer.Character:PivotTo(CFrame.new(startPos))
		end
	end
})

-- === DALGONA TAB ===
local dalgonaTab = Window:Tab({
	Title = "Dalgona",
	Icon = "cookie"
})

-- Dalgona Auto-Complete Variables
local dalgonaEnabled = false
local dalgonaConnection = nil

dalgonaTab:Toggle({
	Title = "Auto Complete Dalgona",
	Default = false,
	Callback = function(state)
		dalgonaEnabled = state
		if dalgonaEnabled then
			-- Start auto-clicking for Dalgona
			dalgonaConnection = RunService.RenderStepped:Connect(function()
				if dalgonaEnabled then
					-- Check if we're in the Dalgona game
					local dalgonaOutline = workspace.Effects:FindFirstChild("UmbrellaOutline") or 
					                      workspace.Effects:FindFirstChild("StarOutline") or 
					                      workspace.Effects:FindFirstChild("CircleOutline") or 
					                      workspace.Effects:FindFirstChild("TriangleOutline") or 
					                      workspace.Effects:FindFirstChild("SackBoyOutline") or 
					                      workspace.Effects:FindFirstChild("MonaLisaOutline")
					
					if dalgonaOutline then
						-- Simulate mouse clicks on the outline parts
						for _, part in pairs(dalgonaOutline:GetChildren()) do
							if part:IsA("BasePart") and not part:GetAttribute("Done") then
								-- Mark as completed instantly
								part:SetAttribute("Done", true)
								part.Color = Color3.fromRGB(0, 255, 0)
								part.Transparency = 0
								part.CastShadow = false
								part.Name = "DalgonaClickPart"
								part.Material = Enum.Material.Neon
								part.Position = part.Position + Vector3.new(0, 0.005, 0)
							end
						end
					end
				end
			end)
		else
			if dalgonaConnection then
				dalgonaConnection:Disconnect()
				dalgonaConnection = nil
			end
		end
	end
})

dalgonaTab:Button({
	Title = "Perfect Trace Mode",
	Callback = function()
		-- Enhanced auto-complete that follows the exact outline
		if workspace.Effects:FindFirstChildOfClass("Model") then
			for _, model in pairs(workspace.Effects:GetChildren()) do
				if model.Name:find("Outline") then
					for _, part in pairs(model:GetChildren()) do
						if part:IsA("BasePart") and not part:GetAttribute("Done") then
							-- Mark as completed instantly
							part:SetAttribute("Done", true)
							part.Color = Color3.fromRGB(0, 255, 0)
							part.Transparency = 0
							part.CastShadow = false
							part.Name = "DalgonaClickPart"
							part.Material = Enum.Material.Neon
							part.Position = part.Position + Vector3.new(0, 0.005, 0)
						end
					end
				end
			end
		end
	end
})

-- === TUG OF WAR TAB ===
local tugOfWarTab = Window:Tab({
	Title = "Tug Of War",
	Icon = "zap"
})

tugOfWarTab:Button({
	Title = "Auto Win Tug of War",
	Callback = function()
		print("Tug of War auto-win activated")
	end
})

-- Auto Click Variables for Tug of War
local tugAutoClickEnabled = false
local tugClickConnection = nil

tugOfWarTab:Toggle({
	Title = "Auto Click",
	Default = false,
	Callback = function(state)
		tugAutoClickEnabled = state
		
		if tugAutoClickEnabled then
			tugClickConnection = RunService.RenderStepped:Connect(function()
				if tugAutoClickEnabled then
					-- Simulate rapid clicking for Tug of War
					game:GetService("VirtualUser"):ClickButton1(Vector2.new(0,0))
					wait(0.05)
				end
			end)
		else
			if tugClickConnection then
				tugClickConnection:Disconnect()
				tugClickConnection = nil
			end
		end
	end
})

-- === HIDE AND SEEK TAB ===
local hideAndSeekTab = Window:Tab({
	Title = "Hide And Seek",
	Icon = "eye-off"
})

hideAndSeekTab:Button({
	Title = "Best Hiding Spot",
	Callback = function()
		print("Teleporting to best hiding spot")
	end
})

hideAndSeekTab:Button({
	Title = "Become Invisible",
	Callback = function()
		if LocalPlayer.Character then
			for _, part in pairs(LocalPlayer.Character:GetChildren()) do
				if part:IsA("BasePart") then
					part.Transparency = 1
				elseif part:IsA("Accessory") then
					part.Handle.Transparency = 1
				end
			end
		end
	end
})

hideAndSeekTab:Button({
	Title = "Become Visible",
	Callback = function()
		if LocalPlayer.Character then
			for _, part in pairs(LocalPlayer.Character:GetChildren()) do
				if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
					part.Transparency = 0
				elseif part:IsA("Accessory") then
					part.Handle.Transparency = 0
				end
			end
		end
	end
})

-- === JUMP ROPE/GLASS BRIDGE TAB ===
local jumpRopeTab = Window:Tab({
	Title = "Jump Rope/Glass Bridge",
	Icon = "activity"
})

jumpRopeTab:Button({
	Title = "Teleport To End (JumpRope)",
	Callback = function()
		print("Teleported")
	end
})

jumpRopeTab:Button({
	Title = "Glass ESP",
	Callback = function()
		print("Showing safe glass bridge path")
	end
})

jumpRopeTab:Button({
	Title = "Teleport To End (GlassBridge)",
	Callback = function()
		print("Teleported")
	end
})

-- === RANDOM FEATURES TAB ===
local randomTab = Window:Tab({
	Title = "Random Features",
	Icon = "settings"
})

randomTab:Slider({
	Title = "WalkSpeed",
	Default = WalkSpeedValue,
	Min = 0,
	Max = 300,
	Callback = function(value)
		WalkSpeedValue = value
	end
})

randomTab:Slider({
	Title = "JumpPower",
	Default = JumpPowerValue,
	Min = 0,
	Max = 300,
	Callback = function(value)
		JumpPowerValue = value
	end
})

randomTab:Slider({
	Title = "Gravity",
	Default = workspace.Gravity,
	Min = 0,
	Max = 300,
	Callback = function(value)
		workspace.Gravity = value
	end
})

randomTab:Toggle({
	Title = "Enable Speed/Jump",
	Default = false,
	Callback = function(state)
		SpeedEnabled = state
	end
})

-- Fly Variables
local flyEnabled = false
local flyConnection = nil
local bodyVelocity = nil

randomTab:Toggle({
	Title = "Fly",
	Default = false,
	Callback = function(state)
		flyEnabled = state
		local character = LocalPlayer.Character
		
		if flyEnabled and character and character:FindFirstChild("HumanoidRootPart") then
			-- Enable fly
			bodyVelocity = Instance.new("BodyVelocity")
			bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
			bodyVelocity.Velocity = Vector3.new(0, 0, 0)
			bodyVelocity.Parent = character.HumanoidRootPart
			
			-- Fly controls
			flyConnection = RunService.RenderStepped:Connect(function()
				if flyEnabled and character and character:FindFirstChild("HumanoidRootPart") and bodyVelocity then
					local camera = workspace.CurrentCamera
					local moveVector = character.Humanoid.MoveDirection
					local flySpeed = 50
					
					if moveVector.Magnitude > 0 then
						bodyVelocity.Velocity = camera.CFrame.LookVector * moveVector.Z * flySpeed + camera.CFrame.RightVector * moveVector.X * flySpeed
					else
						bodyVelocity.Velocity = Vector3.new(0, 0, 0)
					end
				end
			end)
		else
			-- Disable fly
			if bodyVelocity then
				bodyVelocity:Destroy()
				bodyVelocity = nil
			end
			if flyConnection then
				flyConnection:Disconnect()
				flyConnection = nil
			end
		end
	end
})

-- Noclip Variables
local noclipEnabled = false
local noclipConnection = nil

randomTab:Toggle({
	Title = "Noclip",
	Default = false,
	Callback = function(state)
		noclipEnabled = state
		
		if noclipEnabled then
			noclipConnection = RunService.Stepped:Connect(function()
				if noclipEnabled and LocalPlayer.Character then
					for _, part in pairs(LocalPlayer.Character:GetChildren()) do
						if part:IsA("BasePart") then
							part.CanCollide = false
						end
					end
				end
			end)
		else
			if noclipConnection then
				noclipConnection:Disconnect()
				noclipConnection = nil
			end
			-- Re-enable collision
			if LocalPlayer.Character then
				for _, part in pairs(LocalPlayer.Character:GetChildren()) do
					if part:IsA("BasePart") then
						part.CanCollide = true
					end
				end
			end
		end
	end
})

-- === REBEL TAB ===
local rebelTab = Window:Tab({
	Title = "Rebel",
	Icon = "shield"
})

-- Aimbot Variables
local aimbotEnabled = false
local aimbotConnection = nil

rebelTab:Toggle({
	Title = "Aimbot",
	Default = false,
	Callback = function(state)
		aimbotEnabled = state
		
		if aimbotEnabled then
			aimbotConnection = RunService.RenderStepped:Connect(function()
				if aimbotEnabled then
					-- Find nearest guard/enemy
					local camera = workspace.CurrentCamera
					local character = LocalPlayer.Character
					if character and character:FindFirstChild("HumanoidRootPart") then
						local nearestEnemy = nil
						local shortestDistance = math.huge
						
						-- Look for NPCs or enemies
						for _, obj in pairs(workspace:GetChildren()) do
							if obj:FindFirstChild("Humanoid") and obj:FindFirstChild("HumanoidRootPart") and obj ~= character then
								-- Check if it's an enemy
								if obj.Name:find("Guard") or obj.Name:find("Enemy") then
									local distance = (character.HumanoidRootPart.Position - obj.HumanoidRootPart.Position).Magnitude
									if distance < shortestDistance and distance < 100 then
										shortestDistance = distance
										nearestEnemy = obj
									end
								end
							end
						end
						
						-- Aim at nearest enemy
						if nearestEnemy and nearestEnemy:FindFirstChild("Head") then
							camera.CFrame = CFrame.lookAt(camera.CFrame.Position, nearestEnemy.Head.Position)
						end
					end
				end
			end)
		else
			if aimbotConnection then
				aimbotConnection:Disconnect()
				aimbotConnection = nil
			end
		end
	end
})

rebelTab:Toggle({
	Title = "God Mode",
	Default = false,
	Callback = function(state)
		if state then
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
				LocalPlayer.Character.Humanoid.MaxHealth = math.huge
				LocalPlayer.Character.Humanoid.Health = math.huge
			end
		else
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
				LocalPlayer.Character.Humanoid.MaxHealth = 100
				LocalPlayer.Character.Humanoid.Health = 100
			end
		end
	end
})

-- Apply Speed/Jump if enabled
RunService.RenderStepped:Connect(function()
	if SpeedEnabled and LocalPlayer.Character then
		local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			humanoid.WalkSpeed = WalkSpeedValue
			humanoid.JumpPower = JumpPowerValue
		end
	end
end)
